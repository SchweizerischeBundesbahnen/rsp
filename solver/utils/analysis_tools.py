"""
Tools and Methods to analyse the data generated by the experiments

Methods
-------
average_over_trials
    Average over all the experiment trials



"""
from typing import Tuple

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from pandas import DataFrame

matplotlib.use('Qt5Agg')
from mpl_toolkits.mplot3d import Axes3D

# Dummy import currently because otherwise the import is removed all the time but used by 3d scatter plot
axes3d = Axes3D


def average_over_trials(experimental_data: DataFrame) -> Tuple[DataFrame, DataFrame]:
    """
    Average over all the experiment trials
    Parameters
    ----------
    experimental_data

    Returns
    -------
    DataFrame of mean data and DataFram of standard deviations
    """
    averaged_data = experimental_data.groupby(['experiment_id']).mean()
    standard_deviation_data = experimental_data.groupby(['experiment_id']).std()
    return averaged_data, standard_deviation_data


def three_dimensional_scatter_plot(data: DataFrame, error: DataFrame = None,
                                   columns: DataFrame.columns = ['size', 'n_agents', 'time_full'], file_name: str = ""):
    """

    Parameters
    ----------
    data: DataFrame
        DataFrame containing data to be plotted
    error: DataFrame
        DataFrame containing error of z values to plot
    columns: DataFrame.columns
        Three columns of that data frame to be plotted against each other, x_values, y_values,z_values
    file_name: string
        If provided the plot is stored to figure instead of shown

    Returns
    -------

    """
    x_values = data[columns[0]].values
    y_values = data[columns[1]].values
    z_values = data[columns[2]].values

    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.set_xlabel(columns[0])
    ax.set_ylabel(columns[1])
    ax.set_zlabel(columns[2])

    ax.scatter(x_values, y_values, z_values)
    if error is not None:
        # plot errorbars
        z_error = error[columns[2]].values
        for i in np.arange(0, len(z_values)):
            ax.plot([x_values[i], x_values[i]], [y_values[i], y_values[i]],
                    [z_values[i] + z_error[i], z_values[i] - z_error[i]], marker="_")
    if len(file_name) > 1:
        plt.savefig(file_name)
    else:
        plt.show()
